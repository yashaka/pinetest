---
done:
  - Design Patterns and Best Practices implemented:
    - PageObject

    - PageFactory:
      - elements on a page are initialized with a factory (the one from htmlelements yandex library) on the first call to the page

    - LoadableComponent/ChainOfResponsibility:
      - PageObjects knows where they are in the chain of user workflows in the web application:
        - PageObjects can check whether they are already loaded
        - load itself (via loading all dependent PageObjects if needed):
          - once all obligatory parameters are passed to the constructor
          - To achieve this PageObjects extends LoadableComponent abstract class:
            LoadableComponent class is based on implementation of his 'same name' brother from Selenium:
              in addition to Selenium's implementation it also encapsulates:
                - the WebDriver driver object
                - initialization of page elements via HtmlElementLoader (PageFactory implementation from htmlelements framework):
                  once page was loaded

    - Data Driven Testing:
      - This is not fully implemented yet:
        - so far the separation of tests and their data is done only on the classes hierarchy level:
          data lives in DataProviders of the parent base class for the test class the data are used in
        - though the implementation of DataProviderArguments was added:
          it's possible to pass a data source parameter to dataprovider from its test:
            hence the dataprovider will know from where to load data (from file, database, etc... - this is not implemented yet)

    - Elements and Element Containers:
      - instead of using selenium WebElements pinetest uses:
        - Elements extending TypifiedElements from htmlelements framework
        - Element Containers extending ExtendedHtmlElement (extended version of HtmlElement from htmlelements framework)

    - HaveExpectedElements:
      - This interface is implemented by all children of ExtendedLoadableComponent and ExtendedHtmlElement:
        hence we can get all content from the page and its containers via call to getExpectedElements() on the page:
          this gives us very convenient way to implement smoke testing of all static content on the pages and base navigation between pages:
            - via one tiny test per path in the "Chain Of Responsibilites" hirerarchy of page objects: |

                @Test(dataProvider = "adminPageObjects")
                public void testAdminPageExpectedElementsAreDisplayed(final ExtendedLoadableComponent page) {
                    assertPageExpectedElementsAreDisplayed(page);
                }

                protected void assertPageExpectedElementsAreDisplayed(final ExtendedLoadableComponent page) {
                    page.get();
                    for(TypifiedElement element : page.getExpectedElements()) {
                        assertTrue(element.isDisplayed());
                    }
                }

            - each path is reflected in a separate DataProvider which initializes PageObjects and passes them to the test
            - actually all DataProviders may be merged in a one:
              so we will have only one test for all such smoke testing!:
                though in this case each path will not be tested "independently" from the other ones:
                  i.e. some side efects may be catched:
                    what is btw other good idea for additional test case:
                      but to impelement it in a DRY way we need to figure out how to reuse code from previous DataProviders -> TODO

  - Technologies-used:
    - Selenium (WebDriver), HtmlElements, TestNG, Hamcrest

  - Test-Coverage:
    - StaticContent (smoke) testing:
      - this also includes static testing of dynamically generated elements (like products list, user name in userpanel after login, etc.)
      - under static testing the verification of element is Displayed is meant
      - Tested:
        - LoginPage
        - ProductsPage
        - ProductPopupMenuPage
    - Browsers-coverage:
      - Firefox



next:
  - Milestone 0.1: "QuickStart:)":
    - TBD



future:
  - Milestone 0.1: "QuickStart:)":
    - DDT:
      - via Pine:
        - move data from static content tests to pine
        - add setup of database for each test using data from DDT storage
      - for static content tests: #? TODO: this section is considered to be moved to Milestone 0.2
        - make DataProviders DRY
    - more static content tests:
      - check products:
        - admin with empty products
    - add tests to CI:  create testng.xml/yml configuration for CI tests
      - create testng.xml/yml configuration for CI tests
      - add job to jenkins farm at inside.pine-project.org
    - Functional testing for:
      - Pages:
        - LoginPage
        - ProductsPage
        - ProductPopupMenuPage
      - Links:
        - ? consider tesing links in a separate testng suite/group
    - add ReportNG reporting
    - ? move @BeforeClass to @BeforeMethod of static content tests
    - separate StaticContent tests in different classes


  - Milestone 0.2: "TBD":
    - Documentation:
      - Comment code
      - Refactor TestPlan
      - Start series of articles aka "Building Automation Test Framework from scratch: Best Practises"
    - Test Coverage: 
      - Cover all Pages:
        - Popup Pages everywhere
        - AdminPage:
            New/Edit User Page
        - AddProductPage
        - ProductPage:
          - DataTablesPage:
            - AddCategoryPage
            - TBD
          - DataStoagesPage:
            - AddCategoryPage
            - TBD
          - ImportPage
     - Browsers:
       - Chrome
       - InternetExplorer
       - TBD
    - Refactor code
    - TBD


  - Milestone 0.3: "TBD":
    - TBD


---
OpenPoints:
  - case:
    - given:
      - loginPage = new ...
      - productsPage = new ...
      - loginPage.get()
      - productsPage.get()
    - when:
      - loginPage.get()
    - it:
      - will call inside:
        - loginBtn.getWrappedElement():
          - and will just return wrappedElement:
            - why? why won't it call .getWrappedEleent() on a proxy, to seek for the element again on the page?

  - can I overload locators (@FindBy) ?:
    - a workaround may be:
      - make a wrapper for an element as HtmlElement with default 'block' locator:
        - then you have two options:
          - use default locator
          - or override it once
    - but forgoing option use static approach... and best option will be to update/generate locators dynamicaly:
      - i.e. based on values passed to constructors of the page:
        - but nevertheless you can't pass parameters to containers:
          - 'htmlelements' containers can't use user defined constructors:
            - because they are created by factory in a predefined way
    - so...:
      - the only option in current context of containers usage:
        - is to move such verification out of page responsibilities:
          - i.e. to tests themselves:
            - what is good practice nevertheless:)

  - can I use variables in locators (@FindBy)?

  - why can't I catch NullPointerException on btn = loginBtn but can check (loginBtn == null)?

  - what's better?:
    - for(Element element: page.getExpectedElements) { assertTrue(element.isDisplayed() }
    - page.get():
      - isLoaded():
        - element1.getWrappedElement();
    - move getExpectedElements into isLoaded():
      - cons:
        - it will have bad influence on tests run time

...
